# Docker Compose file for Vapor
#
# Install Docker on your system to run and test
# your Vapor app in a production-like environment.
#
# Note: This file is intended for testing and does not
# implement best practices for a production deployment.
#
# Learn more: https://docs.docker.com/compose/reference/
#
#   Build images: docker-compose build
#      Start app: docker-compose up app
# Start database: docker-compose up db
# Run migrations: docker-compose run migrate
#       Stop all: docker-compose down (add -v to wipe db)
#
volumes:
  db_data:

x-shared_environment: &shared_environment
  LOG_LEVEL: ${LOG_LEVEL:-debug}
  DATABASE_HOST: db
  DATABASE_NAME: vapor_database
  DATABASE_USERNAME: vapor_username
  DATABASE_PASSWORD: vapor_password
  DATABASE_URL: postgres://vapor_username:vapor_password@db:5432/vapor_database
  REDIS_URL: redis://redis:6379
  SENDGRID_API_KEY: ${SENDGRID_API_KEY}
  OpenFGA_URL: http://openfga:8080
  
services:
  app:
    image: a-principal-engineer:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
      - redis
      - openfga
    ports:
      - '8080:8080'
    # user: '0' # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.
    command: ["serve", "--env", "development", "--hostname", "0.0.0.0", "--port", "8080", "--auto-migrate"]
    networks:
      - default
      - openfga
  migrate:
    image: a-principal-engineer:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
    command: ["migrate", "--yes"]
    deploy:
      replicas: 0
  revert:
    image: a-principal-engineer:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["migrate", "--revert", "--yes"]
    deploy:
      replicas: 0
  db:
    image: postgres:16-alpine
    volumes:
      - db_data:/var/lib/postgresql/data/pgdata
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: vapor_username
      POSTGRES_PASSWORD: vapor_password
      POSTGRES_DB: vapor_database
      DATABASE_URL: postgres://vapor_username:vapor_password@db:5432/vapor_database
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vapor_username -d vapor_database -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default
      - openfga

  openfga_migrate:
    depends_on:
      db:
        condition: service_healthy
    image: openfga/openfga:latest
    container_name: openfga_migrate
    command: migrate
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://vapor_username:vapor_password@db:5432/vapor_database
    networks:
      - openfga

  openfga:
    depends_on:
      openfga_migrate:
        condition: service_completed_successfully
    image: openfga/openfga:latest
    container_name: openfga
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://vapor_username:vapor_password@db:5432/vapor_database
      - OPENFGA_LOG_FORMAT=json
    command: run
    networks:
      - openfga
    ports:
      # Needed for the http server
      - "8090:8080"
      # Needed for the grpc server (if used)
      - "8091:8081"
      # Needed for the playground (Do not enable in prod!)
      - "3090:3000"

  redis:
    image: docker.io/redis:latest
    command: redis-server --save 60 1 --loglevel warning
    ports:
      - "6379:6379"
    expose:
      - 6379
    volumes:
      - ./redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
    - REDIS_HOSTS=local:redis:6379
    ports:
    - "8083:8081"

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/config.yaml"]
    volumes:
      - ./collector-config.yaml:/etc/config.yaml
    ports:
      - "4317:4317"
    networks: [exporter]
    depends_on: [zipkin, jaeger]

  zipkin:
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"
    networks: [exporter]

  jaeger:
    image: jaegertracing/all-in-one
    ports:
      - "16686:16686"
    networks: [exporter]

networks:
  exporter:
  openfga:
